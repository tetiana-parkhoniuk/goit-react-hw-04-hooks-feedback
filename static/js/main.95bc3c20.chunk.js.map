{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Notification/Notification.module.css"],"names":["module","exports","Section","children","title","className","styles","section","FeedbackOptions","options","onLeaveFeedback","map","option","name","type","feedbackBtn","onClick","Statistics","good","neutral","bad","total","positivePercentage","statList","statListItem","statNumber","Notification","message","countFeedback","state","action","payload","Error","App","useReducer","dispatch","objectKeys","Object","keys","event","target","parseInt","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95bc3c20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statList\":\"Statistics_statList__3BR2u\",\"statListItem\":\"Statistics_statListItem__1g9KO\",\"statNumber\":\"Statistics_statNumber__2SK5K\"};","import PropTypes from 'prop-types';\nimport styles from 'components/Section/Section.module.css'\n\n\nexport default function Section({ children, title }) {\n    return (\n        <section className={styles.section}>\n            <h2 className={styles.title}>{title}</h2>\n            {children}\n        </section>\n    )\n}\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n\n","import PropTypes from 'prop-types';\nimport styles from 'components/FeedbackOptions/FeedbackOptions.module.css';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n    return (\n        <div>\n            {options.map(option => (\n                <button\n                    key={option}\n                    name={option}\n                    type=\"button\"\n                    className={styles.feedbackBtn}\n                    onClick={onLeaveFeedback}>\n                    {option}\n                </button>\n            ))}\n        </div>\n    )\n}\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n}\n\n","import PropTypes from 'prop-types';\nimport styles from 'components/Statistics/Statistics.module.css';\n\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\n    return (\n        <ul className={styles.statList}>\n            <li className={styles.statListItem}>Good:&nbsp;\n                <span className={styles.statNumber}>{good}</span>\n            </li>\n            <li className={styles.statListItem}>Neutral:&nbsp;\n                <span className={styles.statNumber}>{neutral}</span>\n            </li>\n            <li className={styles.statListItem}>Bad:&nbsp;\n                <span className={styles.statNumber}>{bad}</span>\n            </li>\n            <li className={styles.statListItem}>Total:&nbsp;\n                <span className={styles.statNumber}>{total}</span>\n            </li>\n            <li className={styles.statListItem}>Positive Feedback:&nbsp;\n                <span className={styles.statNumber}>{total > 0 && good > 0 && positivePercentage}&#x25;</span>\n            </li>\n        </ul>\n    )\n}\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n}\n\n\n","import PropTypes from 'prop-types';\nimport styles from 'components/Notification/Notification.module.css';\n\nexport default function Notification({ message }) {\n    return (\n        <p className={styles.message}>{message}</p>\n    )\n}\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n};","import React, { useReducer } from 'react';\n// import React, { useState } from 'react';\nimport Section from 'components/Section';\nimport FeedbackOptions from 'components/FeedbackOptions';\nimport Statistics from 'components/Statistics';\nimport Notification from 'components/Notification';\n\n////==== Feedback with Hooks (useReduser) ====////\n\nfunction countFeedback(state, action){\n    switch (action.type) {\n      case 'good':\n        return {\n          ...state,\n          good: state.good + action.payload,\n        };\n      \n      case 'neutral':\n        return {\n          ...state,\n          neutral: state.neutral + action.payload,\n        };\n      \n      case 'bad':\n        return {\n          ...state,\n          bad: state.bad + action.payload,\n        };\n      \n      default:\n        throw new Error(`Not valid feedback type ${action.type}`);\n    }\n  }\n\nexport default function App() {\n  const [state, dispatch] = useReducer(countFeedback, {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  });\n\n  const countTotalFeedback = () => {\n    const { good, neutral, bad } = state;\n    const total = good + neutral + bad;\n    return total;\n  }\n\n  const countPositiveFeedbackPercentage = () => {\n    const positivePercentage = (good / total) * 100;\n    return parseInt(Math.round(positivePercentage));\n  }\n\n  const total = countTotalFeedback();\n  const objectKeys = Object.keys(state);\n  const { good, neutral, bad } = state;\n\n  return (\n    <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={objectKeys}\n          onLeaveFeedback={(event) => dispatch({ type: event.target.name, payload:1})} />\n        </Section>\n\n        {total === 0 ? (<Notification message=\"No feedback given\" />)\n          : (<Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={countPositiveFeedbackPercentage()} />\n          </Section>\n          )\n      }\n    </>\n  )\n}\n\n////==== Feedback with Hooks (useState) ====////\n\n// export default function App() {\n//   const [good, setGood] = useState(0);\n//   const [neutral, setNeutral] = useState(0);\n//   const [bad, setBad] = useState(0);\n  \n//   const onLeaveFeedback = (event) => {\n//     const feedbackName = event.target.name;\n//     if (feedbackName === 'good') {\n//       setGood(state => state + 1);\n//     } else if (feedbackName === 'neutral') {\n//       setNeutral(state => state + 1);\n//     } else if (feedbackName === 'bad') {\n//       setBad(state => state + 1);\n//     } else return;\n//   }\n\n//   const countTotalFeedback = () => {\n//     const total = good + neutral + bad;\n//     return total;\n//   }\n\n//   const countPositiveFeedbackPercentage = () => {\n//     const positivePercentage = (good / total) * 100;\n//     return parseInt(Math.round(positivePercentage));\n//   }\n\n//   const total = countTotalFeedback();\n//   const feedbackOptions = {good: good, neutral: neutral, bad: bad};\n//   const objectKeys = Object.keys(feedbackOptions);\n\n//   return (\n//     <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objectKeys}\n//             onLeaveFeedback={onLeaveFeedback} />\n//         </Section>\n\n//         {total === 0 ? (<Notification message=\"No feedback given\" />)\n//           : (<Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={countPositiveFeedbackPercentage()} />\n//           </Section>\n//           )\n//       }\n//     </>\n//   )\n// }\n\n\n/////===== Original Code ======///////\n\n// export default class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0\n//   }\n\n//   onLeaveFeedback = (event) => {\n//     const feedbackName = event.target.name;\n//     this.setState((prevState) => ({\n//       [feedbackName]: prevState[feedbackName] + 1,\n//     }));\n//   }\n\n//   countTotalFeedback = () => {\n//     const { good, neutral, bad } = this.state;\n//     const total = good + neutral + bad;\n//     return total;\n//   }\n\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     const { good } = this.state;\n//     const positivePercentage = (good / total) * 100;\n//     return parseInt(Math.round(positivePercentage));\n\n//   }\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n//     const objectKeys = Object.keys(this.state);\n//     const total = this.countTotalFeedback();\n//     const positivePercentage = this.countPositiveFeedbackPercentage();\n\n//     return (\n//       <>\n//         <Section title=\"Please leave feedback\">\n//           <FeedbackOptions\n//             options={objectKeys}\n//             onLeaveFeedback={this.onLeaveFeedback} />\n//         </Section>\n\n//         {total === 0 ? (<Notification message=\"No feedback given\" />)\n//           : (<Section title=\"Statistics\">\n//             <Statistics\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={total}\n//               positivePercentage={positivePercentage} />\n//           </Section>\n//           )\n//         }\n//       </>\n//     )\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\",\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackBtn\":\"FeedbackOptions_feedbackBtn__1Gh71\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Notification_message__eciZi\"};"],"sourceRoot":""}